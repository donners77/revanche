
// This file has been generated by the GUI designer. Do not modify.
namespace Revanche.Views
{
	public partial class MainWindow
	{
		private global::Gtk.UIManager UIManager;
		private global::Gtk.Action homeAction;
		private global::Gtk.Action goUpAction;
		private global::Gtk.Action preferencesAction;
		private global::Gtk.Action dndMultipleAction;
		private global::Gtk.Action editAction;
		private global::Gtk.Action addAction;
		private global::Gtk.Action removeAction;
		private global::Gtk.Action deleteAction;
		private global::Gtk.Action dialogInfoAction;
		private global::Gtk.VBox vbox9;
		private global::Gtk.HBox hbox1;
		private global::Gtk.Toolbar toolbar1;
		private global::Gtk.Toolbar toolbar2;
		private global::Gtk.ScrolledWindow scrolledwindow2;
		private global::Gtk.Alignment mainView;

		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget Revanche.Views.MainWindow
			this.UIManager = new global::Gtk.UIManager ();
			global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup ("Default");
			this.homeAction = new global::Gtk.Action ("homeAction", null, global::Mono.Unix.Catalog.GetString ("Home"), "gtk-home");
			w1.Add (this.homeAction, null);
			this.goUpAction = new global::Gtk.Action ("goUpAction", null, global::Mono.Unix.Catalog.GetString ("Parent"), "gtk-go-up");
			w1.Add (this.goUpAction, null);
			this.preferencesAction = new global::Gtk.Action ("preferencesAction", null, global::Mono.Unix.Catalog.GetString ("Settings"), "gtk-preferences");
			w1.Add (this.preferencesAction, null);
			this.dndMultipleAction = new global::Gtk.Action ("dndMultipleAction", null, global::Mono.Unix.Catalog.GetString ("Notes"), "gtk-dnd-multiple");
			w1.Add (this.dndMultipleAction, null);
			this.editAction = new global::Gtk.Action ("editAction", null, global::Mono.Unix.Catalog.GetString ("Edit"), "gtk-edit");
			w1.Add (this.editAction, null);
			this.addAction = new global::Gtk.Action ("addAction", null, null, "gtk-add");
			w1.Add (this.addAction, null);
			this.removeAction = new global::Gtk.Action ("removeAction", null, null, "gtk-remove");
			w1.Add (this.removeAction, null);
			this.deleteAction = new global::Gtk.Action ("deleteAction", null, global::Mono.Unix.Catalog.GetString ("Delete"), "gtk-delete");
			w1.Add (this.deleteAction, null);
			this.dialogInfoAction = new global::Gtk.Action ("dialogInfoAction", null, global::Mono.Unix.Catalog.GetString ("About"), "gtk-dialog-info");
			w1.Add (this.dialogInfoAction, null);
			this.UIManager.InsertActionGroup (w1, 0);
			this.AddAccelGroup (this.UIManager.AccelGroup);
			this.Name = "Revanche.Views.MainWindow";
			this.Title = global::Mono.Unix.Catalog.GetString ("MainWindow");
			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
			this.AllowShrink = true;
			this.DefaultWidth = 800;
			this.DefaultHeight = 600;
			// Container child Revanche.Views.MainWindow.Gtk.Container+ContainerChild
			this.vbox9 = new global::Gtk.VBox ();
			this.vbox9.Name = "vbox9";
			// Container child vbox9.Gtk.Box+BoxChild
			this.hbox1 = new global::Gtk.HBox ();
			this.hbox1.Name = "hbox1";
			// Container child hbox1.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><toolbar name='toolbar1'><toolitem name='homeAction' action='homeAction'/><toolitem name='goUpAction' action='goUpAction'/><toolitem name='dndMultipleAction' action='dndMultipleAction'/><toolitem name='editAction' action='editAction'/><toolitem name='deleteAction' action='deleteAction'/></toolbar></ui>");
			this.toolbar1 = ((global::Gtk.Toolbar)(this.UIManager.GetWidget ("/toolbar1")));
			this.toolbar1.Name = "toolbar1";
			this.toolbar1.ShowArrow = false;
			this.hbox1.Add (this.toolbar1);
			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.toolbar1]));
			w2.Position = 0;
			// Container child hbox1.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><toolbar name='toolbar2'><toolitem name='dialogInfoAction' action='dialogInfoAction'/><toolitem name='preferencesAction' action='preferencesAction'/></toolbar></ui>");
			this.toolbar2 = ((global::Gtk.Toolbar)(this.UIManager.GetWidget ("/toolbar2")));
			this.toolbar2.Name = "toolbar2";
			this.toolbar2.ShowArrow = false;
			this.hbox1.Add (this.toolbar2);
			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.hbox1 [this.toolbar2]));
			w3.PackType = ((global::Gtk.PackType)(1));
			w3.Position = 1;
			w3.Expand = false;
			this.vbox9.Add (this.hbox1);
			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox9 [this.hbox1]));
			w4.Position = 0;
			w4.Expand = false;
			w4.Fill = false;
			// Container child vbox9.Gtk.Box+BoxChild
			this.scrolledwindow2 = new global::Gtk.ScrolledWindow ();
			this.scrolledwindow2.CanFocus = true;
			this.scrolledwindow2.Name = "scrolledwindow2";
			this.scrolledwindow2.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
			this.scrolledwindow2.ShadowType = ((global::Gtk.ShadowType)(1));
			// Container child scrolledwindow2.Gtk.Container+ContainerChild
			global::Gtk.Viewport w5 = new global::Gtk.Viewport ();
			w5.ShadowType = ((global::Gtk.ShadowType)(0));
			// Container child GtkViewport.Gtk.Container+ContainerChild
			this.mainView = new global::Gtk.Alignment (0F, 0F, 1F, 1F);
			this.mainView.Name = "mainView";
			w5.Add (this.mainView);
			this.scrolledwindow2.Add (w5);
			this.vbox9.Add (this.scrolledwindow2);
			global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(this.vbox9 [this.scrolledwindow2]));
			w8.Position = 1;
			this.Add (this.vbox9);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			this.Show ();
			this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
			this.homeAction.Activated += new global::System.EventHandler (this.handlerHome);
			this.goUpAction.Activated += new global::System.EventHandler (this.handlerUp);
			this.preferencesAction.Activated += new global::System.EventHandler (this.handlerSettings);
			this.dndMultipleAction.Activated += new global::System.EventHandler (this.handleNotes);
			this.editAction.Activated += new global::System.EventHandler (this.handleEdit);
			this.deleteAction.Activated += new global::System.EventHandler (this.handlerDelete);
			this.dialogInfoAction.Activated += new global::System.EventHandler (this.handlerAbout);
		}
	}
}
